Index: src/test/java/org/jgrapht/graph/GraphWalkTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * (C) Copyright 2003-2021, by Barak Naveh and Contributors.\r\n *\r\n * JGraphT : a free Java graph-theory library\r\n *\r\n * See the CONTRIBUTORS.md file distributed with this work for additional\r\n * information regarding copyright ownership.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0, or the\r\n * GNU Lesser General Public License v2.1 or later\r\n * which is available at\r\n * http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR LGPL-2.1-or-later\r\n */\r\npackage org.jgrapht.graph;\r\n\r\nimport org.jgrapht.*;\r\nimport org.jgrapht.generate.*;\r\nimport org.jgrapht.util.*;\r\nimport org.junit.*;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n *\r\n * @author Joris Kinable\r\n */\r\npublic class GraphWalkTest\r\n{\r\n\r\n    @Test(expected = IllegalArgumentException.class)\r\n    public void testInvalidPath1()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new Pseudograph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n        graph.addEdge(0, 0);\r\n        // Invalid: the path's edgeList should contain the edge (0,0)\r\n        new GraphWalk<>(graph, 0, 0, Arrays.asList(0, 0), Collections.emptyList(), 0);\r\n    }\r\n\r\n    @Test(expected = IllegalArgumentException.class)\r\n    public void testInvalidPath2()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new Pseudograph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n        // Invalid: the path's vertexList and edgeList cannot both be empty\r\n        new GraphWalk<>(graph, 0, 0, Collections.emptyList(), Collections.emptyList(), 0);\r\n    }\r\n\r\n    @Test(expected = InvalidGraphWalkException.class)\r\n    public void testInvalidPath3()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n        // Invalid: The graph does not contain a self loop from 0 to 0.\r\n        GraphWalk<Integer, DefaultEdge> gw =\r\n            new GraphWalk<>(graph, 0, 0, Arrays.asList(0, 0), null, 0);\r\n        gw.verify();\r\n    }\r\n\r\n    @Test(expected = InvalidGraphWalkException.class)\r\n    public void testInvalidPath4()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(DefaultEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        graph.addEdge(0, 1);\r\n        graph.addEdge(1, 2);\r\n        graph.addEdge(2, 3);\r\n\r\n        // Invalid: The graph does not contain an edge from 1 to 3\r\n        GraphWalk<Integer, DefaultEdge> gw =\r\n            new GraphWalk<>(graph, 0, 2, Arrays.asList(0, 1, 3, 2), null, 0);\r\n        gw.verify();\r\n    }\r\n\r\n    @Test(expected = InvalidGraphWalkException.class)\r\n    public void testInvalidPath5()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(DefaultEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        DefaultEdge e1 = graph.addEdge(0, 1);\r\n        graph.addEdge(1, 2);\r\n        DefaultEdge e3 = graph.addEdge(2, 3);\r\n\r\n        // Invalid: the path jumps from vertex 1 to vertex 2 (edge (1,2) is skipped)\r\n        GraphWalk<Integer, DefaultEdge> gw =\r\n            new GraphWalk<>(graph, 0, 2, null, Arrays.asList(e1, e3), 0);\r\n        gw.verify();\r\n    }\r\n\r\n    @Test\r\n    public void testValidPaths()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n\r\n        // empty path\r\n        GraphWalk<Integer, DefaultEdge> gw1 =\r\n            new GraphWalk<>(graph, null, null, Collections.emptyList(), Collections.emptyList(), 0);\r\n        gw1.verify();\r\n        GraphWalk<Integer, DefaultEdge> gw2 =\r\n            new GraphWalk<>(graph, null, null, null, Collections.emptyList(), 0);\r\n        gw2.verify();\r\n        GraphWalk<Integer, DefaultEdge> gw3 =\r\n            new GraphWalk<>(graph, null, null, Collections.emptyList(), null, 0);\r\n        gw3.verify();\r\n\r\n        // singleton path\r\n        GraphWalk<Integer, DefaultEdge> gw4 =\r\n            new GraphWalk<>(graph, 0, 0, Collections.singletonList(0), Collections.emptyList(), 0);\r\n        gw4.verify();\r\n        GraphWalk<Integer, DefaultEdge> gw5 =\r\n            new GraphWalk<>(graph, Collections.singletonList(0), 0);\r\n        gw5.verify();\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyPath()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(DefaultEdge.class);\r\n        List<GraphWalk<Integer, DefaultEdge>> paths = new ArrayList<>();\r\n        paths.add(new GraphWalk<>(graph, null, null, Collections.emptyList(), 0));\r\n        paths.add(new GraphWalk<>(graph, Collections.emptyList(), 0));\r\n        for (GraphWalk<Integer, DefaultEdge> path : paths) {\r\n            Assert.assertEquals(0, path.getLength());\r\n            Assert.assertEquals(Collections.emptyList(), path.getVertexList());\r\n            Assert.assertEquals(Collections.emptyList(), path.getEdgeList());\r\n            Assert.assertTrue(path.isEmpty());\r\n            Assert.assertEquals(GraphWalk.emptyWalk(graph), path);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testNonSimplePath()\r\n    {\r\n        CompleteGraphGenerator<Integer, DefaultEdge> completeGraphGenerator =\r\n            new CompleteGraphGenerator<>(5);\r\n        Graph<Integer, DefaultEdge> completeGraph = new SimpleGraph<>(\r\n            SupplierUtil.createIntegerSupplier(), SupplierUtil.DEFAULT_EDGE_SUPPLIER, false);\r\n        completeGraphGenerator.generateGraph(completeGraph);\r\n\r\n        List<Integer> vertexList = Arrays.asList(0, 1, 2, 3, 2, 3, 4);\r\n        List<DefaultEdge> edgeList = new ArrayList<>();\r\n        for (int i = 0; i < vertexList.size() - 1; i++)\r\n            edgeList.add(completeGraph.getEdge(vertexList.get(i), vertexList.get(i + 1)));\r\n        GraphPath<Integer, DefaultEdge> p1 = new GraphWalk<>(completeGraph, 0, 4, edgeList, 10);\r\n        Assert.assertEquals(0, p1.getStartVertex().intValue());\r\n        Assert.assertEquals(4, p1.getEndVertex().intValue());\r\n        Assert.assertEquals(vertexList, p1.getVertexList());\r\n        Assert.assertEquals(edgeList.size(), p1.getLength());\r\n        Assert.assertEquals(10.0, p1.getWeight(), 0.0000000001);\r\n\r\n        GraphPath<Integer, DefaultEdge> p2 = new GraphWalk<>(completeGraph, vertexList, 10);\r\n        Assert.assertEquals(0, p2.getStartVertex().intValue());\r\n        Assert.assertEquals(4, p2.getEndVertex().intValue());\r\n        Assert.assertEquals(edgeList, p2.getEdgeList());\r\n        Assert.assertEquals(edgeList.size(), p2.getLength());\r\n        Assert.assertEquals(10.0, p2.getWeight(), 0.0000000001);\r\n    }\r\n\r\n    @Test\r\n    public void testReversePathUndirected()\r\n    {\r\n        Graph<Integer, DefaultWeightedEdge> graph =\r\n            new SimpleWeightedGraph<>(DefaultWeightedEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        DefaultWeightedEdge e1 = Graphs.addEdge(graph, 0, 1, 2);\r\n        DefaultWeightedEdge e2 = Graphs.addEdge(graph, 1, 2, 3);\r\n        DefaultWeightedEdge e3 = Graphs.addEdge(graph, 2, 3, 4);\r\n\r\n        GraphWalk<Integer, DefaultWeightedEdge> gw1 =\r\n            new GraphWalk<>(graph, 0, 3, Arrays.asList(0, 1, 2, 3), null, 9);\r\n        GraphWalk<Integer, DefaultWeightedEdge> gw2 =\r\n            new GraphWalk<>(graph, 0, 3, null, Arrays.asList(e1, e2, e3), 9);\r\n\r\n        GraphWalk<Integer, DefaultWeightedEdge> rev1 = gw1.reverse(gw -> gw1.getWeight());\r\n        rev1.verify();\r\n        GraphWalk<Integer, DefaultWeightedEdge> rev2 = gw2.reverse(gw -> gw2.getWeight());\r\n        rev2.verify();\r\n\r\n        GraphWalk<Integer, DefaultWeightedEdge> revPath =\r\n            new GraphWalk<>(graph, 3, 0, null, Arrays.asList(e3, e2, e1), 9);\r\n        Assert.assertEquals(revPath, rev1);\r\n        Assert.assertEquals(revPath, rev2);\r\n\r\n        rev1 = gw1.reverse();\r\n        Assert.assertEquals(9.0, gw1.getWeight(), 0.0000000001);\r\n        rev2 = gw2.reverse();\r\n        Assert.assertEquals(9.0, gw2.getWeight(), 0.0000000001);\r\n    }\r\n\r\n    @Test(expected = InvalidGraphWalkException.class)\r\n    public void testReverseInvalidPathDirected()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleDirectedGraph<>(DefaultEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        graph.addEdge(0, 1);\r\n        graph.addEdge(1, 2);\r\n        graph.addEdge(2, 3);\r\n\r\n        GraphWalk<Integer, DefaultEdge> gw1 =\r\n            new GraphWalk<>(graph, 0, 3, Arrays.asList(0, 1, 2, 3), null, 0);\r\n        // Walk cannot be reversed since reverse arcs do not exist\r\n        gw1.reverse(gw -> gw.edgeList.stream().mapToDouble(gw.graph::getEdgeWeight).sum());\r\n    }\r\n\r\n    @Test\r\n    public void testReversePathDirected()\r\n    {\r\n        Graph<Integer, DefaultWeightedEdge> graph =\r\n            new SimpleDirectedWeightedGraph<>(DefaultWeightedEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        Graphs.addEdge(graph, 0, 1, 1);\r\n        Graphs.addEdge(graph, 1, 2, 2);\r\n        Graphs.addEdge(graph, 2, 3, 3);\r\n\r\n        DefaultWeightedEdge e1 = Graphs.addEdge(graph, 3, 2, 4);\r\n        DefaultWeightedEdge e2 = Graphs.addEdge(graph, 2, 1, 5);\r\n        DefaultWeightedEdge e3 = Graphs.addEdge(graph, 1, 0, 6);\r\n\r\n        GraphWalk<Integer, DefaultWeightedEdge> gw1 =\r\n            new GraphWalk<>(graph, 0, 3, Arrays.asList(0, 1, 2, 3), null, 0);\r\n        GraphWalk<Integer, DefaultWeightedEdge> rev1 =\r\n            gw1.reverse(gw -> gw.getEdgeList().stream().mapToDouble(gw.graph::getEdgeWeight).sum());\r\n        rev1.verify();\r\n        GraphWalk<Integer, DefaultWeightedEdge> revPath =\r\n            new GraphWalk<>(graph, 3, 0, null, Arrays.asList(e1, e2, e3), 15);\r\n\r\n        Assert.assertEquals(revPath, rev1);\r\n        Assert.assertEquals(15, rev1.getWeight(), 0.00000001);\r\n\r\n        GraphWalk<Integer, DefaultWeightedEdge> rev2 = gw1.reverse();\r\n        Assert.assertEquals(6, rev2.getWeight(), 0.00000001);\r\n    }\r\n\r\n    /**\r\n     * Cannot extend empty path\r\n     */\r\n    @Test(expected = IllegalArgumentException.class)\r\n    public void testIllegalConcatPath1()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleDirectedWeightedGraph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n        GraphWalk<Integer, DefaultEdge> gw1 = GraphWalk.emptyWalk(graph);\r\n        GraphWalk<Integer, DefaultEdge> gw2 = GraphWalk.singletonWalk(graph, 0, 10);\r\n        gw1.concat(gw2, gw -> gw1.getWeight() + gw2.getWeight());\r\n    }\r\n\r\n    /**\r\n     * Cannot concat two paths which do not end/start at the same vertex\r\n     */\r\n    @Test(expected = IllegalArgumentException.class)\r\n    public void testIllegalConcatPath2()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleDirectedWeightedGraph<>(DefaultEdge.class);\r\n        graph.addVertex(0);\r\n        graph.addVertex(1);\r\n        GraphWalk<Integer, DefaultEdge> gw1 = GraphWalk.singletonWalk(graph, 0, 10);\r\n        GraphWalk<Integer, DefaultEdge> gw2 = GraphWalk.singletonWalk(graph, 1, 12);\r\n        gw1.concat(gw2, gw -> gw1.getWeight() + gw2.getWeight());\r\n    }\r\n\r\n    @Test\r\n    public void testConcatPath1()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleDirectedWeightedGraph<>(DefaultEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1, 2, 3));\r\n        graph.addEdge(0, 1);\r\n        graph.addEdge(1, 2);\r\n        DefaultEdge e3 = graph.addEdge(2, 3);\r\n        DefaultEdge e4 = graph.addEdge(3, 1);\r\n        GraphWalk<Integer, DefaultEdge> gw1 =\r\n            new GraphWalk<>(graph, 0, 2, Arrays.asList(0, 1, 2), null, 5);\r\n        GraphWalk<Integer, DefaultEdge> gw2 =\r\n            new GraphWalk<>(graph, 2, 1, null, Arrays.asList(e3, e4), 7);\r\n        GraphWalk<Integer, DefaultEdge> gw3 =\r\n            gw1.concat(gw2, gw -> gw1.getWeight() + gw2.getWeight());\r\n        gw3.verify();\r\n\r\n        GraphWalk<Integer, DefaultEdge> expected =\r\n            new GraphWalk<>(graph, 0, 1, Arrays.asList(0, 1, 2, 3, 1), null, 12);\r\n        Assert.assertEquals(expected, gw3);\r\n        Assert.assertEquals(12, gw3.getWeight(), 0.00000001);\r\n    }\r\n\r\n    @Test\r\n    public void testConcatPathWithSingleton()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph = new SimpleDirectedWeightedGraph<>(DefaultEdge.class);\r\n        Graphs.addAllVertices(graph, Arrays.asList(0, 1));\r\n        graph.addEdge(0, 1);\r\n        GraphWalk<Integer, DefaultEdge> gw1 =\r\n            new GraphWalk<>(graph, 0, 1, Arrays.asList(0, 1), null, 5);\r\n        GraphWalk<Integer, DefaultEdge> gw2 = GraphWalk.singletonWalk(graph, 1, 10);\r\n        GraphWalk<Integer, DefaultEdge> gw3 =\r\n            gw1.concat(gw2, gw -> gw1.getWeight() + gw2.getWeight());\r\n        gw3.verify();\r\n        // Concatenation with singleton shouldn't result in a different path.\r\n        Assert.assertEquals(gw1, gw3);\r\n    }\r\n\r\n    @Test\r\n    public void testFirstEmptyWalkEquality()\r\n    {\r\n        Graph<Integer, DefaultEdge> graph1 = new SimpleGraph<>(DefaultEdge.class);\r\n        GraphWalk<Integer, DefaultEdge> gw1 = GraphWalk.emptyWalk(graph1);\r\n\r\n        Graph<Integer, DefaultEdge> graph2 = new SimpleGraph<>(DefaultEdge.class);\r\n        graph2.addVertex(0);\r\n        GraphWalk<Integer, DefaultEdge> gw2 = GraphWalk.singletonWalk(graph2, 0);\r\n        Assert.assertNotEquals(gw1, gw2);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/jgrapht/graph/GraphWalkTest.java b/src/test/java/org/jgrapht/graph/GraphWalkTest.java
--- a/src/test/java/org/jgrapht/graph/GraphWalkTest.java	(revision 5231a8696573cd5929929e2bcc09243c2e77d5bf)
+++ b/src/test/java/org/jgrapht/graph/GraphWalkTest.java	(date 1652481110023)
@@ -232,7 +232,6 @@
 
         Assert.assertEquals(revPath, rev1);
         Assert.assertEquals(15, rev1.getWeight(), 0.00000001);
-
         GraphWalk<Integer, DefaultWeightedEdge> rev2 = gw1.reverse();
         Assert.assertEquals(6, rev2.getWeight(), 0.00000001);
     }
Index: target/classes/META-INF/maven/org.jgrapht/jgrapht-core/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Generated by Maven Integration for Eclipse\r\n#Fri May 13 23:06:42 BST 2022\r\nm2e.projectLocation=C\\:\\\\Users\\\\Cleto\\\\Desktop\\\\ES-LEI-2Sem-2022-Grupo-7\r\nm2e.projectName=ES-LEI-2Sem-2022-Grupo-7\r\ngroupId=org.jgrapht\r\nartifactId=jgrapht-core\r\nversion=1.5.1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/META-INF/maven/org.jgrapht/jgrapht-core/pom.properties b/target/classes/META-INF/maven/org.jgrapht/jgrapht-core/pom.properties
--- a/target/classes/META-INF/maven/org.jgrapht/jgrapht-core/pom.properties	(revision 5231a8696573cd5929929e2bcc09243c2e77d5bf)
+++ b/target/classes/META-INF/maven/org.jgrapht/jgrapht-core/pom.properties	(date 1652547946588)
@@ -1,5 +1,5 @@
 #Generated by Maven Integration for Eclipse
-#Fri May 13 23:06:42 BST 2022
+#Sat May 14 18:05:46 BST 2022
 m2e.projectLocation=C\:\\Users\\Cleto\\Desktop\\ES-LEI-2Sem-2022-Grupo-7
 m2e.projectName=ES-LEI-2Sem-2022-Grupo-7
 groupId=org.jgrapht
